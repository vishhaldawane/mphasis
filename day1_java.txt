



		The Java Programming Language

				- with Vishhal

		

//the fundamental building block of any
//java program is to write a "class"
//highly structured language 
//sanskrit - listen speak    read  write 

//Greet.java -> class Greetings { main() {}  }



		

	1. start cmd prompt
		window + r ( to get a run dialog )
		cmd 
	2. goto your desired drive/folder
		d:
		cd javatraining
		cd java ( if this folder is not created
			  then make it via -> mkdir java)
	3. notepad Cricket.java
	
		class Cricketer
		{
			public static void main(String args[])
			{
				System.out.prinlnt("Hit Sixer");
			}
		}

	4. after saving this file type  -> javac Cricket.java
	5. dir -> to see the update list-> java  Cricketer

		
	if javac is not running then 
	1. start cmd prompt

	2. type -> path <-- to see the current path settings

		echo %path% will also work to see the path settings

	3. now add (append) the path to java jdk folder 

		set path=%path%;c:\program files\java\jdk1.8.0_251\bin
		    <--------no spaces after = and ; --------->

	4. review the path -> path <--command 

	




	one .java file may have multiple class declarations

	on compiling this .java file
	it will generate all the respective .class file

	if that class file has the main function, 
	then it is eligible to	run 


	Naming convention
	------------------
pascal->ClassNameIsLikeThis		MainUpmire,LegUmpire, DriverManager

camel->	methodNameIsLikeThis		setLookAndFeel(), openConnection()
camel->	variableNameIsLikeThis		totalScore, salaryOfJanuary

capital->CONTANT_IS_LIKE_THIS		PI, SPEED_OF_LIGHT



			Java Technology
			|
	-----------------------------------------
	|		|		|
	JSE		JEE		JME
	|		|		|
	standard	enterprise	micro (android)
	|		|RC,HA,MT,P,C.T,S
	core java	-----------------
	|		|		|
language fundamentals	Web		Enterprise JavaBeans
oops concepts		|			|
packages		Servlets(server)  --------------------
access specifiers	JSP		  |	   |	    |
exception handling	|		 Session  Entity  Message	
multithreading		Angular(client)	  |	     |		|
generics			---------------   ---------  -------
collection f/w			|	    |	   |      |  |    |
file handling			stateless stateful BMP  CMP sms  mail
JDBC			website/app
			bookmyshow
			oyorooms
				--->		->	->	->







		Java Core		


			Data types in Java
				|
		--------------------------------------
		|				|
	Primitive			Secondary
	|
-------------------------------
|	  |	   | 	     |	
integral floating character boolean
|	   |		|	|
byte  1	   float  4    char	boolean 1
short 2    double 8   2 bytes	   false/true
int   4			UNICODE
long  8		  (ASCII + UNICODE )
		    0 .... 65534
		byte  nurseryRollNumber=13;
		short collegeRollNumber=1678;
		int   universityNumber=33980;
		long  harvardUniveristyNumber=67890;


	1 byte = 8 bits

		1 bit = Binary digIT
	
	a single bit has potential of "to be off" or "to be on"
					0		1

	MSB							LSB
	|							|
	bit8	bit7	bit6	bit5	bit4	bit3	bit2	bit1
	2^7	2^6	2^5	2^4	2^3	2^2	2^1	2^0
   =>	128	64	32	16	8	4	2	1

1 bit  = 0	0	0	0	0	0	0	0  0
         0	0	0	0	0	0	0	1  1

2 bits = 0	0	0	0	0	0	0	0  0
	 0	0	0	0	0	0	0	1  1
	 0	0	0	0	0	0	1	0  2
	 0	0	0	0	0	0	1	1  3


3 bits = 0	0	0	0	0	0	0	0  0
	 0	0	0	0	0	0	0	1  1
	 0	0	0	0	0	0	1	0  2
	 0	0	0	0	0	0	1	1  3
	 0	0	0	0	0	1	0	0  4
	 0	0	0	0	0	1	0	1  5
	 0	0	0	0	0	1	1	0  6
	 0	0	0	0	0	1	1	1  7
	
4 bits =	16						   0
								..15

5 bits = 	32

6 bits = 	64
7 bits =	128

8 bits = 	256	completing  (byte)
9		512
10		1024
11		2048
12		4096	
13		8192
14		16384
15		32768 -- completing (short)
16
17
18..
..
32		2 147 483,648 - completing (int )
33
..
34..
64		9 223 372 036 854,775 808


	1 byte = 8 bits

	8 bits means the range of the magnitude would be

-128 -126 -125 ....-5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 ...... 127
<---negative dial---------------->|<---------positive-------->
<--------------------------256 such numbers------------------>
	



float  4 ( 32 bits )

	3.40282347 x 10 ^ 38 - 1.40239846 X 10 ^(-45)


	class			object
	|			|
	People			People p1 = new People();
				p1.clap();
				p1.shout();

	Cricketer		Cricketer c1 = new Cricketer();
				c1.hitSixer();	
				c1.defend();
			

Design of the "Object"		Instance of a "Class"

blueprint of a house		actual house(s) out of the blueprint

class SavingsAccount
{
	
}

	class Cat			Cat c1 = new Cat();
	{				Cat c2 = new Cat();

		String color;
		int weight;
		int age;

		void meow() {
		}
		void chaseMice() {
		}
		void snooze() {
		}
		void drinkMilk() { }
	}	
	
		Juice				Person
		|				|
	-------------------		------------------------------------------------------------------------
	|	|	|		|	|	|	|		|		|
	type	color	size		mind	age	gender	drinkJuice()	writeNotes()	withdrawCash()
	|	|	|		|	|	|	<------------------activities ------------->
	fruit	orange	200ml	    thoughts	22	'F'		that will affect the data
				<-----|----->
				past	 future

		Juice j = new Juice();
		Person p = new Person();

		

	Object = physical state + behaviour
	c1	  white, 5, 1		meow();
	c2	  black, 7, 2		snooze();
	c3	  brown, 4, 4		chaseMice();

	STACK			HEAP
				color	 weight	 age
				--------------------------
				|	|	|	|
				-------------------------
	+---------------------->100
	|
	100
	c1			meow() { } chaseMice() { }
				snooze() { } drinkMilk() { }

				color	 weight	 age
				--------------------------
				|	|	|	|
				-------------------------
	+---------------------->200
	|
	200
	c2
	

from Kamala Betha to everyone:    5:11 PM
4.shape
from Mounika Mandala to everyone:    5:13 PM
lamp
from Revilla Prudhvi Sai Srinivas to everyone:    5:17 PM
35.hotel receipt
from Deme Aishwarya to everyone:    5:19 PM
11.Electricity Bill 
from Navya Divi to everyone:    5:21 PM
27.railway ticket booking
from Utkarsh Singh to everyone:    5:21 PM
39.Robot
from Shanmugi S to everyone:    5:21 PM
36.University
from Hima Geethika Irri to everyone:    5:22 PM
19.Office
from VARSHITHA M to everyone:    5:22 PM
41. fruit
from haneesha pillimitla to everyone:    5:22 PM
18.Traffic
from Catherin Revu to everyone:    5:23 PM
6.mobile phone 
from Nisarga to everyone:    5:23 PM
28. Company
from Aditya Shanbhag to everyone:    5:23 PM
2.Cars
from Akruti Khurana to everyone:    5:28 PM
3. dance 
from Mugambica to everyone:    5:29 PM
24.finance
from Darshan N G to everyone:    5:32 PM
tanuja mic
from chinthaparthi prudviraj kumar reddy to everyone:    5:35 PM
7.Chocolate
from gandikota tanuja to everyone:    5:36 PM
sorry guys my  network was diconnected its showing in mute state in mylap that way i dont about it  
from Pratyush Injam to everyone:    5:44 PM
31.telephone bill
from Prasanth Reddy to everyone:    5:45 PM
30.zoo
from Deepika Bondili to everyone:    5:45 PM
10.college admission
from Vinay K to everyone:    5:45 PM
43. Export
from Aavula Sowmya to everyone:    5:45 PM
1.Ticket Booking
from Marina Amulya to everyone:    5:45 PM
20.logi n details 
from Ashish Aggarwal to everyone:    5:46 PM
46. cars
from Ravi Singh to everyone:    5:46 PM
34.Dog
from vaddepalli shashank veera to everyone:    5:47 PM
40.Airline reservation 
from GUDDITI GNANESWARI to everyone:    5:47 PM
16.book
from Narun kumar to everyone:    5:47 PM
25.cities





	is "Sachin Tendulkar" a class or an object ?
	   <------|-------->
		  |
	attribute of the object

	neither the object nor the class


	class Cricketer
	{
		int rank;
		String cricketerName;
		float strikeRate;
		long totalScore;
		int age;
	}

	class SachinTendulkar
	{
		int age;
		long totalScore;
	}
	class ViratKohli
	{
		int age;
		long totalScore;
	}

Cricketer cr1 = new Cricketer(1,"Sachin Tendulkar",87.90f,12000,40);
Cricketer cr2 = new Cricketer(2,"Virat Kohli",67.90f,10000,34);

----------------------------------------------------------------
Day 2




oops concepts	



		Object Oriented Programming System


	POPS = procedure <-- data  (game of open functions)

			int global;

	GLOBAL		float myBalance=3600000;
	GLOBAL		String bankTelPhoneNumber="180 540 350";
			300 VARIABLES   10
			+
			2000 FUNCTION   20

			int main() {
				withdraw(50000);
				deposit(30000);
				changeBankTelephone
			}
			void withdraw(float amt) { // 35,50,000
				myBalance = myBalance - amt;	
				bankTelPhoneNumber="890 3664 585"; //out of contract activity
			}
			void deposit(float amt) { // 35,80,000
				myBalance = myBalance + amt;	
			}
			void changeBankTelephoneNumber(String newPhoneNum)
			{
				bankTelPhoneNumber = newPhone;
				myBalance = 12920930;
			}
			5000 LINES


	OOPS =	data <-- procedure

	SEMANTICS of an Object
	"decide what data you have "
	and identify contractual functions of it

class BankAccount {			class Bank {
	myBalance				bankTelPhoneNumber
	|					|
	withdraw(float)				changeBanktelPhoneNumber()
	deposit(float)	
}					}
BankAccount ba1 = new BankAccount		Bank b1 = new Bank();
BankAccount ba2 = new BankAccount		Bank b2 = new Bank();
BankAccount ba3 = new BankAccount		Bank b3 = new Bank();
		ba4..ba10000			
		
ba1.withdraw(5000)
ba2.withdraw(7000)


	YOU				NEIGHBOUR
	|				|
	myFood				theirFood
	|				|
	set() get()			set() get()

	mySalary			theirIncome
	|				|
	get()				get()



				Tailor - Jack
	
	Jane					julie			robert		peter
	|					|			|		|
	measurer				cuttingmaster		stitcher	delivery
----------------------------------------+
|	measuremetData			|
|	1	20			|
|	2	23			|
|	3	30			|
|	4	28			|
|	..	..			|	
|					|
|	measure()	makeDiagram()--------->	cutting()	stitching()
|	|		  |		| 	|			|
|	initialization 	refer the data	|	no context to
|	of the data	as read ONLY	|	refer the data
|					|	(even no read)
+---------------------------------------+

	how can I access your neuron



	OOPS Concepts
	
		1. Abstraction
			it is the "what is it?" part of an object

			"What is" an ATM?
				withdraw cash

			"what is" telephone?	
				remote talk

			hiding the complexity of an object
			dealing with the USAGE of the object

			- data abstraction ( how much cash in ATM?)
			- procedural abstraction ( log the user/ 
			take video shooting of the user/record the voice)

		2. Encapsulation

			it is the "how is it?"  part of an object
			
			"how is an ATM working?"
				how the cash is dispensed
			"how is a telephone working"
				how the speech is transmitted

		responsible for the internal functioning of an object
		
		bind the data and concerned function together
			- private data + accessible function
		


		3. Polymorphism
			ability of a business entity to have
			multiple forms
			poly = many
			morph = form/appearance

			a. function overloading
			- ability of a function to be redefined
			and can be distinguished based 
			on 
				i. type of parameter/argument
				ii. number of parameter
				iii. sequence of parameter


			b. function overriding (inheritance related)


		4. Inheritance

			ability of a "business entity" to acquire
			properties from "existing business entites"
			  |
		(data + function + nested classes)

		    BankAccount - base class / super class
			| acno name balance
			| withdraw(){ subtract } deposit() { add }
	---------------------------------
	|		|		|
SavingsAccount	CurrentAccount	   CreditAccount - derived classes/
  |acno 		|acno 		 |acno		sub classes
  |name 		|name 		 |name
  |balance		|balance	 |balance
  |+ intersetRate	|+overDraftLimit |creditLimit
  |					 |
FixedDepositAccount
  |acno
  |name
  |balance
  |+ maturityPeriod
		


		





	Constructor


		- it is a "special function" that has the "same
		name" as of the enclosing class

		- it does NOT have return type

		- but it can take parameters/arguments

		- it is AUTOMATICALLY invoked DURING OBJECT
		CREATION TIME
		
		- for a given object it cannot be called twice

			BankAccount ba1 = new BankAccount();
			- its called above

			- again it cannot be called
			ba1.BankAccount(); //illegal

			


		class Doctor
		{
			<-- is there a constructor in this class?	
		}
		
	
	

		1. explore loops

			do while
			while
			for

		2. switch condition
			various choices (int, char, String)
			make a food menu
				1.
				2.
				3.
				choice 
			loop this switch in a do while....

		3. explore inheritance 
			single
			multilevel
			multiple level (interfaces)

		4. ppt 
	
















		5. Object communication

			One object communcates with another 
			Object







	BankAccount ba = new BankAccount(); 
	ba.setBalance(500000); //accessible methods
	ba.showBalance(); //accessible methods

	//but bankBalance is INDIRECTLY accessible
	
	below private data is bound by accessible methods

	class BankAccount
	{
		private float bankBalance;

		void setBalance(float amt) {
			bankBalance = amt;
		}
		void showBalance() {
			Sop("Balance is ; "+bankBalance);
		}
	}

	EN "capsule" ate it
		|
	  wrap the bittermost /sunlight/air
	  medicine in a "small" "eatable" "plastic" container







default / implicit no-arg ctor

what is common between
Point2D and Point3D?
x,y		x,y
  		z

Inheritance is a propeller of 
a JavaShip

	Point2D
	|
----------------------
|isA		|
Point3D

every Point3D is implicitly Point2D
but not other way round
every point2D is not a Point3D

	class Point2D
	{
	  private int x;
	  private int y;	
		
	 void setPoint2D(int a,int b)
         { x = a; y = b;}

	 Point2D(int a,int b)
         { x = a; y = b;}

	}

Point2D p1 = new Point2D(75,80);
 or
Point2D p1 = new Point2D();
p1.setPoint(75,80);


	Doctor
	|
-------------------
|isA
Surgeon
   |
------------------
|isA		|isA
NeuroSurgeon	HeartSurgeon



	BankAccount
	|
---------------------------
isA		|isA
SavingsAccount  CurrentAccount
|isA
FixedDepositAccount



	Linear inheritance 

			Object
			|
		------------------------------
		|
		Point2D
		|x,y
	---------------------
	|isA		|
	|		|
L	Point3D		ColouredPoint2D		R
	|z		|  color
	|		
	--------+
		|
		|isA
		|
	ColouredPoint3D
	x,y,z, (color)




	hasA Relationship
	
		Human is a Heart

		Human hasA Heart


		Human is a Pen

		Human hasA Pen

		Human usesA Pen
		
		Human producesA Article


	Car has an Engine
	or
	Car is an engine


	hasA means containment 

	class WholeEntity
	{
		PartEntity p1 = new PartEntity();
		PartEntity p2 = new PartEntity();
		PartEntity p3 = new PartEntity();
		PartEntity p4 = new PartEntity();
	}


	class Machine {

	}
	class WashingMachine extends Machine //isA
	{

		WashingTub washTub = new WashingMachine(); //hasA

		void wash() {
			Sop("Washing....");
		}
	}

	
	class Human extends Animal {
		Heart h = new Heart();

	}

	class Person extends Human //isA
	{
		gender
		age
		name
		AadhaarCard aCard = new AadhaarCard(); //hasA


	}

	class Student extends Person
	{
		ReportCard rpt1 = new ReportCard();
		ReportCard rpt2 = new ReportCard();
		ReportCard rpt3 = new ReportCard();
		...


	}

Four Basic functions
----------------------

 return type    argument/parameters passed
	|          |
	void fun(void)
	{
		code of the function 
	}

function    
     "without return value"
1. 	|	          "without arguments" and 
	|		  |
	void clearScreen( | )
	{

	}


function    
     "without return value"
2. 	|	          "with arguments" But
	|		   |
	void gotoLocation( int x, int y )
	{

	}

function    
     "with return value"
3. 	|	          "with arguments" And
	|		    |
	int   calcRectArea( int l, int b )
	{
		return l * b;	
	}

function    
     "with return value"
4. 	|	      "without arguments" But
	|		|
	float   calcPI( | )
	{
		return 22/7;
	}
	

	Passing Object as a parameter to the function

	Returning  Object as a return value from a function









	class Machine
	{

	}
	class ATMMachine extends Machine
	{

	}

	class Reader { }
	class CardReader extends Reader {

	}











	a. single level
			BankAccount
			|
		-----------------
		|
		SavingsAccount
		|
		FixedDepositAccount

	b. multi-level 


	c. hierarchical level

		Animal
		|x
	-----------------------------------------
	|		|		|
	Bird		Mammal		Fish
	|layEggs();	|  |giveBirth()	|layEggs();
	-----------------  --------------
		|		|
	  	Bat		Whale
	FlyingMammal		
			above (c) is possible in C++
			but not in JAVA ( use interfaces* )
	
	




	b. function overriding

		let subclass re-define a function
		that has the "same name" as of 
		its "nearest parent class"

	

	it is possible that the super class handle can point to
	its child object

		Doctor d = new Doctor();

		d.diagnose();


		d = new Surgeon();

		d.diagnose(); //????

		d = new HeartSurgeon();

		d.dianose();  //???






	static 	member		vs		non=static member
	|					|
	is class's data				object's data
	|					|
	it is created before the		it is created during
	object					the object creation
	|
	kiteCount				color
						owner
						length
	showKiteCount() {			showKite() { }
	}					fly() { }
						kiteFight() { }






	==============================================================
	|	  |	field	    |	method	     |	class	     |
	=============================================================|
	|	  | shared data	    | to refer other |  lets defer   |
	|static	  | across all	    | static members |  this to      |
	|	  | objects of the  | of the class   |  future       |
	|	  | class	    |                |  sessions     |
	=============================================================|
	|	  | its a constant  | cannot be      | cannot be     |
	|final	  |		    | overridden     | extended or   |
	|	  |		    |                | subclassed    |
	=============================================================|
	|abstract |	NA	    |partial contract|  a class with |
	|	  |		    |of a class      | partial contr-|
	|         |		    |(method without | act           |
	|	  |                 |     body)      |               |
	=============================================================|

	drawing artist -> draw abstract images
					 |
				------------------------------------
				|	|	|	|	
		seer-->		cloud	face	forest	God	
	will decide the 
	implementation

	
	abstract class GeometricalShape
	{

	}
	it is not compulsory to have abstract method in an abstract
	class.
	But an abstract method must reside in an abstract class

	class Triangle { }
	class Rectangle { }
	class Circle { }



	abstract class BankAccount { } //perfect syntax

	abstract class BankAccount { 
		void withdraw() { }
	} //perfect syntax

	class BankAccount {
		abstract void withdraw();  //illegal 
	}

	abstract class C {
		abstract void fun(); //legal
	}

	abstract class BankAccount {
		abstract void fun(); //legal
		void foo() { }
	}

		BankAccount <===abstract terminology
			|it acts as a hook for business rule
			| withdraw();  deposit(); <--undefined
			|
	---------------------------------------
	|		|		|
SavingsAccount	CurrentAccount	CreditAccount <== ATM (options are shown)
withdraw(){}	withdraw(){}		withdraw(){} <--mandatory implementation
deposit(){}	deposit(){}		deposit(){} <--mandatory implementation

	James Gosling - The Java Programming Language
	Ken Arnold


		Java Inheritance
			|
	---------------------------------------
	|			|
	Derivation		Implementation
	|			|
	A			A <--- abstract class
	| fun(){}		| fun(); <-- partial contract of a class
	B			B
	| fun(){}		| fun() { } must be defined here
	|			|
	C fun(){}		C fun() { } may/may not be overridden





	whenever our brain has some clue
	then it is abstract terminology


	whenever our brain has no clue at all
	then it is interface terminology


1			Instrument
				|use(); //primordial function of all 8 concrete examples 
		--------------------------------------------------
		|					|
2	MusicalInstrument				MedicalInstrument		
		|play();					|operate();
	-----------------------------		---------------------------------------
	|			|			|		|
3 StringBasedMusical   AirBasedMusical		SurgicalMedical		PathologicalMedical
  Instrument	       Instrument		Instrument		Instrument	
     |tuneStrings();	     |clean();		     |steralize();  	    | reader();
 ---------------	-------------		-------------------	---------------------
  |           |		|	   |		|		|	|		|	
4 Violin    Guitar	Flute	Saxophone 	Cutter	      Needle	Glucometer	ECGMachine
  bowing()  pluck()	operate     pushButton() cut(){}      poke(){}	  readSugar(){}   readCardioGraph(){ }
  {}        {}		SixHoles()  {}			     stitch(){}
	     |		{}
 	     |
	ElectronicGuitar
	  presets() { }
 <--------------------all these eight exist in material form------------------------------>




	for an abstract child it is not mandatory
	to fulfill the contracts of its abstract parent
	it may fulfill or may not . or simply it 
	can be forwarded to the next child



	abstract class A
	{
		abstract void fun();
	}
	abstract class B extends A
	{
	
	}
	class C extends B {
		
	}
















		final field is a constant 
		final function cannot be overridden
		final class cannot be extended

		lets try


	






	interfaces

		- 

	fundamental unit of programming in java is a CLASS

but     fundamental unit of object oriented progamming is to write a
	TYPE	

		pure type - interface


			Payment <-- pure type 
			|
			|	pay();
			|
	-----------------------------------------
	|		|		|
  ChequePayment	    CashPayment      NEFTPayment
    pay() { }		pay(){ }	pay(){ }


	Ask the Sun about the light or brightness
	Sun wont reply !!!

	how come a blind person by birth knows darkness
	if never experienced light!!!!
 
			Light - pure one 
			|
			| does light know darkness???
			| if not? then it does not know light as well
	------------------------------------
	|		|		|
	SunLight	MoonLight	TubeLight <-- implementations

	
	interface is a strict version of abstract classes



	







	Packages

	(CANNOT HAVE SPACES)		(CAN HAVE SPACES)
		 |				|
		packages are similar to directories
		|				|
		Java			operating system
					
		
			
			d:
			|	
	main package->	jungle
			|
		-----------------------------------------
		|	|	|		|
sub package->	cave	tree	river		safari
		|	|	|		|
		Tiger	Monkey	Crocodile	Visitor
		|	|	|		|
private	 ->	age	fruit	riverDepth	camera

	by keeping each class in its respective folder
	how to avail it????? by making/declaring that 
	folder as package

	
		There four access specifiers

			1. private
		 	2. protected
			3. public
			4.       <-- default ( blank / not given )

===============================================	
cave
	class Tiger  
	{
	     private   int privateAge; //2nd one
	     protected int protectedAge; //2nd one
		public int publicAge; // 3rd one
		       int defaultAge; //4th one

	}
	class WhiteTiger extends Tiger
	{
		//here protectedAge can be referred
	}
	class ButterFly { }
===============================================	
	all 4 variables of the Tiger class are also the part
	of WhiteTiger (apart from WhiteTiger's variables)

	BUT THE "FOUR ACCESS SPECIFIERS" WOULD MAKE IT LESSER OR MORE
	RESTRICTED TO ACCESS/REFER THEM (TO USE THEM )

	1. privateAge variable is only available to access
	   inside the Tiger class body

	2. proctectedAge variable is available inside the Tiger
	   class and all of its subclasses




1.private-inside class
2.public- inside class, inside & outside package , 
outside package subclass.
3.default- inside class ,only inside package.
4.protected- inside class , inside package , outside package subclass.












	beyond interfaces/abstract classes/or ordinary classes

		one rule is fixed and that is below


		SuperClass  handle = new ChildClassObject();
		|		   = new 
	this can be an interface	child of interface
	or abstract classs		child of abstract class
	or any other normal class	or child of normal class

	A foo(); <-- interface
	|
	B foo() { }
	  fun() { }

	A <--abstract class
	|
	B

	A <--normal class
	|
	B

		A a  = new B();
		 via a u can only invoke methods of A 
		 but never the method of B 
		a.foo();
		a.fun();//illegal, since handle a does not know fun()
			


=====================================================================



	Exception handling


		programming languages
		there are various types of errors
				|
	-----------------------------------------------
	|	     |	        |	   |	   |
	compile     linker     runtime    fatal    logical
	|		|	|	    |	       |
	"syntax"    libraries  Exception   device     4+4=16
				|	   issue/	developer's
				|	  critical	logic 
				|
		a program faces errors during its 
		runtime is known as Exception


	development 	vs	deployment
	|			|
	coding it		installed and run
	|			|
	airport activities	|
	|			|
	on the run-way		in the sky


	Eather
	|
	Air		<============
	|
	Fire <-heavy
	|
	Water <-heavier
	|
	Earth <--heaviest - Flight





	let me know if its cracking the sound



			Exceptions (runtime errors)
			    |
	 	---------------------------------
		|			|
		"before run"		"during run"
		|			|
by compiler ->  checked		   un"checked"
 (javac)
		|			|
	1.   wear a mask	    oxygen level 	
	2.   carry/apply 
             sanitizer
	3.   wash your hand



			class Car 
			{
				void longDrive()  //50km
				{

				}
				void shortDrive() //5km
				{

				}
			}
				
		
	1. what will u care "before" the shortdrive???
		key,driving license,helmet

	2. what care u might have to take "during" the shortdrive???
		speed limit, red-signal, zebra crossing
		speed breakers

	3. what will u care "before" the longdrive???
		key,driving license,helmet
		best route,condition of vehicle, fuel,
		tyre pressure (stepney wheel of a car)
		vehicle papers, water bottle, food, sufficient money
		covid test rpt, 

	4. what care u might have to take "during" the longdrive???
		speed limit, red-signal, zebra crossing
		speed breakers
	1...5..10...15...20...25...			....200


	why to use try catch instead of if and else



fundTransfer(src, trg, trfAmt)
{
	if(trg present)
	then
		if(src present)
		then
			if(src bal > trfAmt)
			then
				src withdraw trfAmt
				trg deposit trfAmt
			else
				insufficient bal at src
		else
			src not found
	else
		trg not found

}
	in the above code where is the business code
	and where is the error code
	


fundTransfer(src, trg, trfAmt)
{
	if(trg not present)
	then
		trg not found
	else
		if(src not present)
		then
			src not found
		else
			if(src bal > trfAmt)
			then
				src withdraw trfAmt
				trg deposit trfAmt
			else
				insufficient bal at src

}


	the problem with if and else jungle
	is that the error logic and business logic
	is intermingled/mixed
	and the programs will lack clarity of business code
	increase the maintenance of the code too


fundTransfer(src, trg, trfAmt)
{
	try
	{
		1 find src 
		2 find trg
		3 find src bal > trfAmt
		4 src withdraw trfAmt
		5 trg deposit trfAmt
	}
	catch(if trg not found)
		trg not found
	catch(if src not found)
		src not found
	catch(src bal > trfAmt)
		insufficient bal at src

}








			Object
			|
		---------------------------------
				|
				Throwable
				|
		----------------------------------
		|			|
		Error		  Exception
				   | "checked" by the compiler
		-------------------------------------
		|		|		|
	RuntimeException	IOException	SQLException .. .. ..
	| "un-checked"			|
	| by the compiler	FileNotFoundException
	|isA
------------------------------------------------------
|		      |   |   |                   |  |
|		      |   |TyrePuncturedException |SpeedBreakerDishonouredException
|		      |   |RedSignalDishonouredException
NullPointerException  |  ArithmeticException 
		      |
		IndexOutOfBoundsException
			|
	-----------------------------	
	|			|
ArrayIndexOutOfBoundsException	StringIndexOutOfBoundsException


	+-------if y is 0 (then JVM wont send this line
	|		|  to the cpu)	
z = x / y went to the JVM   rather it will do following 
			|  code
			| ArithmeticException e = new 
			|	ArithmeticException ("/ by zero");
			|	throw e;
			|
			+-----------> CPU
					
	the thrown object must be caught by the
	receiving application code, 
	if uncaught then it is rethrown back to
	the same place from where it was thrown

	and there it is never recaught, and program terminates


	so it is essential to catch the thrown object
	by writing try catch code

	and the appropriate data type of the thrown object
	in the catch block


	try catch finally   throw throws 



	Vehicle
	|
	Car
	|
	SedanCar
	|
	HondaCar

	